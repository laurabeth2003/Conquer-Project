def screen5():
            def motion(event):
                global x
                global y
                x = root5.winfo_pointerx() - root5.winfo_rootx()
                y = root5.winfo_pointery() - root5.winfo_rooty()
            def backtomain():
                root5.destroy()
                screendesign()
            
            def searchdate():
                def expand():
                    global i 
                    global y
                    global uniqueIDs
                    global start
                    global end
                    global currentmemberID
                    currentmemberID = 0
                    g = 0
                    print(g)
                    click = 0
                    while (click < (len(uniqueIDs))):
                        if (y <= (135 + (g*35)) and y >= (105 + (g*35))):
                            currentmemberID = uniqueIDs[click]    
                            break
                        click += 1
                        g += 1
                    initiallabel = ttk.Label(canvas)
                    canvas.create_window(340, 340 + g*35, height = 400, width = 680,window = initiallabel)
                    query = "SELECT * FROM visits WHERE memberID = ?"
                    allguests = db.read_table_1condition(db.create_connection(db.data), query, (currentmemberID,))
                    print(allguests)
                    gfirst = ttk.Label(canvas, text = "Guest First Name")
                    canvas.create_window(height = 30, width = 125, x = 162, y = 140 + g*35, window = gfirst)
                    glast = ttk.Label(canvas, text = "Guest Last Name")
                    canvas.create_window(height = 30, width = 125, x = 287, y = 140 + g*35, window = glast)
                    gbirth = ttk.Label(canvas, text= "Guest Birth Date")
                    canvas.create_window(height = 30, width = 125, x = 412, y = 140 + g*35, window = gbirth)
                    gage = ttk.Label(canvas, text= "Guest Age")
                    canvas.create_window(height = 30, width = 100, x = 525, y = 140 + g*35, window = gage)
                    gdate = ttk.Label(canvas, text= "Visit Date")
                    canvas.create_window(height = 30, width = 105, x = 627, y = 140 + g*35, window = gdate)
                    
                    for guest in allguests:
                        g += 1
                        guestlist = list(guest)
                        print(guestlist)
                        if (calculate_date(guestlist[8]) > calculate_date(start) and calculate_date(guestlist[8]) < calculate_date(end)): 
                            gfirstlabel = ttk.Label(canvas, text = guestlist[2])
                            canvas.create_window(height = 30, width = 125, x = 162, y = 155 + g*35, window = gfirstlabel)
                            glastlabel = ttk.Label(canvas, text = guestlist[3])
                            canvas.create_window(height = 30, width = 125, x = 287, y = 155 + g*35, window = glastlabel)
                            gbirthlabel = ttk.Label(canvas, text = guestlist[6])
                            canvas.create_window(height = 30, width = 125, x = 412, y = 155 + g*35, window = gbirthlabel)
                            gagelabel = ttk.Label(canvas, text = guestlist[7])
                            canvas.create_window(height = 30, width = 100, x = 525, y = 155 + g*35, window = gagelabel)
                            gvisitdatelabel = ttk.Label(canvas, text = guestlist[8])
                            canvas.create_window(height = 30, width = 105, x = 627, y = 155 + g*35, window = gvisitdatelabel)
                    
                            
                    
                global currentmonth
                global currentyear
                global todaymonth
                global todayyear
                global i
                global uniqueIDs
                global y
                global start
                global end
                y = 0
                root5.bind('<Button-1>', motion)
                i = 0
                initiallabel2 = ttk.Label(canvas) 
                canvas.create_window(height = 340, width = 680, x = 0, y = 70, window = initiallabel2)
                today()
                query = 'SELECT * FROM visits'
                rows = db.read_table(db.create_connection(db.data), query)
                memberIDs = []
                mfirstlabel = ttk.Label(canvas, text = "First Name")
                canvas.create_window(height = 30, width = 130, x = 10, y = 70, window = mfirstlabel)
                mlastlabel = ttk.Label(canvas, text = "Last Name")
                canvas.create_window(height = 30, width = 130, x = 140, y = 70, window = mlastlabel)
                mpasses_ulabel = ttk.Label(canvas, text = "Passes used during period")
                canvas.create_window(height = 30, width = 210, x = 270, y = 70, window = mpasses_ulabel)
                mpasses_rlabel = ttk.Label(canvas, text = "Passes remaining this month")
                canvas.create_window(height = 30, width = 200, x = 480, y = 70, window = mpasses_rlabel)
                start = StartDate.get()
                start = start.strip()
                end = EndDate.get()
                end = end.strip()
                for r in rows:
                    if (calculate_date(r[8]) > calculate_date(start) and calculate_date(r[8]) < calculate_date(end)): 
                        memberid = list(r)
                        memberIDs.append(memberid[1])
                memberIDs = sorted(memberIDs)
                uniqueIDs = []
                uniqueIDs.append(memberIDs[0])
                
                for m in range(1, len(memberIDs)):
                    if (memberIDs[m - 1] != memberIDs[m]):
                        uniqueIDs.append(memberIDs[m])
                
                visitsinperiod = []
                
                for k in range(0, len(uniqueIDs)):
                    visit = 0
                    currentID = uniqueIDs[k]
                    for j in range(0, len(memberIDs)):
                        if (memberIDs[j] == currentID):
                            visit += 1
                    visitsinperiod.append(visit)
                
                for u in range(0, len(uniqueIDs)):
                    visits = 0
                    query2 = "SELECT memberFirstName, memberLastName FROM member WHERE memberID = ?"
                    columns = db.read_table_1condition(db.create_connection(db.data), query2, (uniqueIDs[u],))
                    for c in columns:
                        i += 1
                        col = list(c)
                        memberF = ttk.Label(canvas, text = str(col[0]))
                        canvas.create_window(height = 30, width = 130, x = 10, y = (70 + i*35), window = memberF)
                        memberL = ttk.Label(canvas, text = str(col[1]))
                        canvas.create_window(height = 30, width = 130, x = 140, y = (70 + i*35), window = memberL)
                        memberI = ttk.Label(canvas, text = str(visitsinperiod[u]))
                        canvas.create_window(height = 30, width = 20, x = 270, y = (70 + i*35), window = memberI)
                        memberexpand = ttk.Button(canvas, text = "Expand", command = expand)
                        canvas.create_window(height = 30, width = 100, x = 310, y = (70 + i*35), window =memberexpand)
                        query = "SELECT visitDate FROM visits WHERE memberID = ?"
                        rows = db.read_table_1condition(db.create_connection(db.data), query, (uniqueIDs[u],))
                        for row in rows:
                            datelist = list(row)
                            calculate_monthyear(datelist[0])
                            if (currentmonth == todaymonth and currentyear == todayyear):
                                visits += 1
                                
                            remaining = (2 - (visits))
                            memberrem = ttk.Label(canvas, text = str(remaining))
                            canvas.create_window(height = 30, width = 120, x = 550, y = (70 + i*35), window = memberrem)
